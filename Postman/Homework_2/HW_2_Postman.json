{
	"info": {
		"_postman_id": "5861cc9b-5c6c-4c31-87dc-2f671f0bc39d",
		"name": "HW_2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Проверить, что в body приходит правильный string.",
							"",
							"",
							"pm.test(\"Good string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 3. Спарсить response body в json.",
							"",
							"var jsonData = pm.response.json();",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"Name = name request\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Siarhei\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Age = age request \", function () {",
							"    pm.expect(jsonData.age).to.eql(\"30\");",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Salary = salary request\", function () {",
							"    pm.expect(jsonData.salary).to.eql(1000);",
							"});",
							"",
							"// 7. Спарсить request.",
							"",
							"var Request = request.data;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name = name request\", function () {",
							"    pm.expect(jsonData.name).to.eql(Request.name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Age = age request\", function () {",
							"    pm.expect(jsonData.age).to.eql(Request.age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Salary = salary request\", function () {",
							"    pm.expect(jsonData.salary).to.eql(parseInt(Request.salary));",
							"});",
							"// 11. Вывести в консоль параметр family из response.",
							"",
							"console.log(jsonData.family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test(\"u_salary_1_5_year = salary_4\", function () {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(request.data.salary*4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Siarhei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"",
							"var jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"",
							"var Request = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name = name request\", function () {",
							"    pm.expect(jsonData.name).to.eql(Request.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"Age = age request\", function () {",
							"    pm.expect(jsonData.age).to.eql(Request.age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"Salary = salary request\", function () {",
							"    pm.expect(jsonData.salary).to.eql(parseInt(Request.salary));",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"",
							"console.log(\"Response_family = \" , jsonData.family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"Dog have name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"    // pm.expect({name:jsonData.family.pets.dog}).to.have.property('name')",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"Dog have age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"    // pm.expect({age:jsonData.family.pets.dog}).to.have.property('age')",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"Name have  Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"",
							"pm.test(\"Age is 4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Siarhei&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Siarhei"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"",
							"var jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"",
							"var Request = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name = name request\", function () {",
							"    pm.expect(jsonData.name).to.eql(Request.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Age = age request\", function () {",
							"    pm.expect(jsonData.age).to.eql(parseInt(Request.age));",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"",
							"console.log(\"Request salary = \" , Request.salary);",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"",
							"console.log(\"Response salary = \" , jsonData.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"    console.log(\"i0 = \" , jsonData.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"    console.log(\"i1 = \" , jsonData.salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"    console.log(\"i2 = \" , jsonData.salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"i = 0\", function (){",
							"    pm.expect(jsonData.salary[0]).to.eql(parseInt(Request.salary))",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"i = 1\", function (){",
							"    pm.expect(parseInt(jsonData.salary[1])).to.eql(Request.salary*2)",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"pm.test(\"i = 2\", function (){",
							"    pm.expect(parseInt(jsonData.salary[2])).to.eql(Request.salary*3)",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"",
							"pm.environment.set(\"name\");",
							"",
							"// 16. Создать в окружении переменную age",
							"",
							"pm.environment.set(\"age\");",
							"",
							"// 17. Создать в окружении переменную salary",
							"",
							"pm.environment.set(\"salary\");",
							"",
							"// 18. Передать в окружение переменную name",
							"",
							"pm.environment.set(\"name\",jsonData.name);",
							"",
							"// 19. Передать в окружение переменную age",
							"",
							"    pm.environment.set(\"age\",jsonData.age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"",
							"    pm.environment.set(\"salary\",jsonData.salary[0]);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"for (let i of jsonData.salary) {",
							"    console.log(\"Salary = \" , i)",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Siarhei&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Siarhei"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"",
							"    salary = pm.environment.get(\"salary\");",
							"",
							"// 2. Вставить параметр age из окружения в age",
							"",
							"    age = pm.environment.get(\"age\");",
							"",
							"// 3. Вставить параметр name из окружения в name",
							"",
							"    name = pm.environment.get(\"name\");",
							"",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// 6. Спарсить response body в json.",
							"",
							"var jsonData = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"",
							"var Request = request.data;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"start_qa_salary_in_response\", function () {",
							"",
							"pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"qa_salary_after_6_months_in_response\", function () {",
							"",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"qa_salary_after_12_months_in_response\", function () {",
							"",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"qa_salary_after_1.5_year_in_response\", function () {",
							"",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"qa_salary_after_3.5_years_in_response\", function () {",
							"",
							"pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"person_in_response\", function () {",
							"",
							"pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"start_qa_salary = salary_request\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(parseInt(Request.salary));",
							"});",
							"",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_6_months = salary_2_request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(Request.salary*2);",
							"});",
							"",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_12_months = salary_2.7_request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+Request.salary*2.7);",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_1.5_year = salary_3.3_request\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(Request.salary*3.3);",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"",
							"pm.test(\"qa_salary_after_3.5_years = salary_3.8_request\", function () {",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(Request.salary*3.8);",
							"});",
							"",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"u_name_i_1 = salary_request\", function () {",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(parseInt(Request.salary));",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"",
							"pm.test(\"u_age = age_request\", function () {",
							" ",
							"pm.expect(jsonData.person.u_age).to.eql(Number(Request.age));",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"pm.test(\"u_salary_5_years = salary_4.2_request\", function () {",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql((Request.salary)*4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"for (let i in Object.keys(jsonData.person)) {",
							"    console.log(Object.keys(jsonData.person)[i])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Siarhei",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}